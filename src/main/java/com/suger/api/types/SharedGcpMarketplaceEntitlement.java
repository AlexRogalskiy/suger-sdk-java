package com.suger.api.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = SharedGcpMarketplaceEntitlement.Builder.class
)
public final class SharedGcpMarketplaceEntitlement {
  private final Optional<String> account;

  private final Optional<List<SharedGcpMarketplaceConsumer>> consumers;

  private final Optional<String> createTime;

  private final Optional<String> id;

  private final Optional<List<Integer>> inputProperties;

  private final Optional<String> messageToUser;

  private final Optional<String> name;

  private final Optional<String> newOfferDuration;

  private final Optional<String> newOfferEndTime;

  private final Optional<String> newOfferStartTime;

  private final Optional<String> newPendingOffer;

  private final Optional<String> newPendingOfferDuration;

  private final Optional<String> newPendingPlan;

  private final Optional<String> newPlan;

  private final Optional<String> offer;

  private final Optional<String> offerDuration;

  private final Optional<String> offerEndTime;

  private final Optional<String> plan;

  private final Optional<String> product;

  private final Optional<String> productExternalName;

  private final Optional<String> provider;

  private final Optional<String> quoteExternalName;

  private final Optional<SharedGcpMarketplaceEntitlementState> state;

  private final Optional<String> subscriptionEndTime;

  private final Optional<String> updateTime;

  private final Optional<String> usageReportingId;

  private int _cachedHashCode;

  SharedGcpMarketplaceEntitlement(Optional<String> account,
      Optional<List<SharedGcpMarketplaceConsumer>> consumers, Optional<String> createTime,
      Optional<String> id, Optional<List<Integer>> inputProperties, Optional<String> messageToUser,
      Optional<String> name, Optional<String> newOfferDuration, Optional<String> newOfferEndTime,
      Optional<String> newOfferStartTime, Optional<String> newPendingOffer,
      Optional<String> newPendingOfferDuration, Optional<String> newPendingPlan,
      Optional<String> newPlan, Optional<String> offer, Optional<String> offerDuration,
      Optional<String> offerEndTime, Optional<String> plan, Optional<String> product,
      Optional<String> productExternalName, Optional<String> provider,
      Optional<String> quoteExternalName, Optional<SharedGcpMarketplaceEntitlementState> state,
      Optional<String> subscriptionEndTime, Optional<String> updateTime,
      Optional<String> usageReportingId) {
    this.account = account;
    this.consumers = consumers;
    this.createTime = createTime;
    this.id = id;
    this.inputProperties = inputProperties;
    this.messageToUser = messageToUser;
    this.name = name;
    this.newOfferDuration = newOfferDuration;
    this.newOfferEndTime = newOfferEndTime;
    this.newOfferStartTime = newOfferStartTime;
    this.newPendingOffer = newPendingOffer;
    this.newPendingOfferDuration = newPendingOfferDuration;
    this.newPendingPlan = newPendingPlan;
    this.newPlan = newPlan;
    this.offer = offer;
    this.offerDuration = offerDuration;
    this.offerEndTime = offerEndTime;
    this.plan = plan;
    this.product = product;
    this.productExternalName = productExternalName;
    this.provider = provider;
    this.quoteExternalName = quoteExternalName;
    this.state = state;
    this.subscriptionEndTime = subscriptionEndTime;
    this.updateTime = updateTime;
    this.usageReportingId = usageReportingId;
  }

  /**
   * @return The resource name of the account that this entitlement is based on, if any, in format &quot;&quot;providers/{provider_id}/accounts/{account_id}&quot;
   */
  @JsonProperty("account")
  public Optional<String> getAccount() {
    return account;
  }

  /**
   * @return The resources using this entitlement, if applicable.
   */
  @JsonProperty("consumers")
  public Optional<List<SharedGcpMarketplaceConsumer>> getConsumers() {
    return consumers;
  }

  @JsonProperty("createTime")
  public Optional<String> getCreateTime() {
    return createTime;
  }

  /**
   * @return Entitlement Id generated by GCP Marketplace. For Marketplace pub/sub event.
   */
  @JsonProperty("id")
  public Optional<String> getId() {
    return id;
  }

  /**
   * @return The custom properties that were collected from the user to create this entitlement.
   */
  @JsonProperty("inputProperties")
  public Optional<List<Integer>> getInputProperties() {
    return inputProperties;
  }

  /**
   * @return Provider-supplied message that is displayed to the end user. Currently this is used to communicate progress and ETA for
   * provisioning. This field can be updated only when a user is waiting for an action from the provider, i.e. entitlement state is
   * EntitlementState.ENTITLEMENT_ACTIVATION_REQUESTED or EntitlementState.ENTITLEMENT_PENDING_PLAN_CHANGE_APPROVAL. This field is cleared automatically when the entitlement state changes.
   */
  @JsonProperty("messageToUser")
  public Optional<String> getMessageToUser() {
    return messageToUser;
  }

  /**
   * @return The resource name of the entitlement. Entitlement names have the form <code>providers/{provider_id}/entitlements/{entitlement_id}</code>.
   */
  @JsonProperty("name")
  public Optional<String> getName() {
    return name;
  }

  /**
   * @return in ISO 8601 duration format, such as &quot;P2Y3M&quot;. For Marketplace pub/sub event.
   */
  @JsonProperty("newOfferDuration")
  public Optional<String> getNewOfferDuration() {
    return newOfferDuration;
  }

  /**
   * @return Output only. The end time of the new offer. Field is empty if the pending plan change is not moving to an offer.
   * If the offer was created with a term instead of a specified end date, this field is empty.
   */
  @JsonProperty("newOfferEndTime")
  public Optional<String> getNewOfferEndTime() {
    return newOfferEndTime;
  }

  /**
   * @return Output only. The start time of the new offer. Field is empty if the pending plan change is not moving to an offer.
   */
  @JsonProperty("newOfferStartTime")
  public Optional<String> getNewOfferStartTime() {
    return newOfferStartTime;
  }

  /**
   * @return The name of the offer the entitlement is switching to upon a pending plan change. Only exists if the
   * pending plan change is moving to an offer. Format:
   * 'projects/{project}/services/{service}/privateOffers/{offer-id}' OR
   * 'projects/{project}/services/{service}/standardOffers/{offer-id}',
   * depending on whether the offer is private or public.
   */
  @JsonProperty("newPendingOffer")
  public Optional<String> getNewPendingOffer() {
    return newPendingOffer;
  }

  /**
   * @return The offer duration of the new offer in ISO 8601 duration format. Field is empty if the pending plan
   * change is not moving to an offer since the entitlement is not pending, only the plan change is pending.
   */
  @JsonProperty("newPendingOfferDuration")
  public Optional<String> getNewPendingOfferDuration() {
    return newPendingOfferDuration;
  }

  /**
   * @return The identifier of the pending new plan. Required if the product has plans and the entitlement has a pending plan change.
   */
  @JsonProperty("newPendingPlan")
  public Optional<String> getNewPendingPlan() {
    return newPendingPlan;
  }

  /**
   * @return When the buyer changes plan, For Marketplace pub/sub event.
   */
  @JsonProperty("newPlan")
  public Optional<String> getNewPlan() {
    return newPlan;
  }

  /**
   * @return The name of the offer that was procured. Field is empty if order was not made using an offer. Format:
   * 'projects/{project}/services/{service}/privateOffers/{offer-id}' OR 'projects/{project}/services/{service}/standardOffers/{offer-id}',
   * depending on whether the offer is private or public.
   */
  @JsonProperty("offer")
  public Optional<String> getOffer() {
    return offer;
  }

  /**
   * @return The offer duration of the current offer in ISO 8601 duration format. Field is empty if entitlement was not made using an offer, such as &quot;P1Y&quot;, &quot;P2M&quot;
   */
  @JsonProperty("offerDuration")
  public Optional<String> getOfferDuration() {
    return offerDuration;
  }

  /**
   * @return Output only. End time for the Offer association corresponding to this entitlement. The field is only populated if the entitlement is currently associated with an Offer.
   */
  @JsonProperty("offerEndTime")
  public Optional<String> getOfferEndTime() {
    return offerEndTime;
  }

  /**
   * @return The identifier of the plan that was procured. Required if the product has plans.
   */
  @JsonProperty("plan")
  public Optional<String> getPlan() {
    return plan;
  }

  /**
   * @return The identifier of the entity that was purchased. This may actually represent a product, quote, or offer.
   * For Private offer, &quot;projects/project-id/services/product-id.endpoints.partner-id.cloud.goog/privateOffers/private-offer-id&quot;
   */
  @JsonProperty("product")
  public Optional<String> getProduct() {
    return product;
  }

  /**
   * @return The identifier of the product that was procured.
   */
  @JsonProperty("productExternalName")
  public Optional<String> getProductExternalName() {
    return productExternalName;
  }

  /**
   * @return The ID of the service provider under Cloud Commerce platform that this entitlement was created against.
   */
  @JsonProperty("provider")
  public Optional<String> getProvider() {
    return provider;
  }

  /**
   * @return The identifier of the quote that was used to procure, such as the private offer Id. Empty if the order is not purchased using a quote.
   */
  @JsonProperty("quoteExternalName")
  public Optional<String> getQuoteExternalName() {
    return quoteExternalName;
  }

  /**
   * @return Enums of the Entitlement State. https://cloud.google.com/marketplace/docs/partners/commerce-procurement-api/reference/rest/v1/providers.entitlements#EntitlementState
   */
  @JsonProperty("state")
  public Optional<SharedGcpMarketplaceEntitlementState> getState() {
    return state;
  }

  /**
   * @return The End time for the subscription corresponding to this entitlement.
   */
  @JsonProperty("subscriptionEndTime")
  public Optional<String> getSubscriptionEndTime() {
    return subscriptionEndTime;
  }

  /**
   * @return The last update timestamp. It is the endTime for the cancelled entitlement.
   */
  @JsonProperty("updateTime")
  public Optional<String> getUpdateTime() {
    return updateTime;
  }

  /**
   * @return The consumerId to use when reporting usage through the Service Control API. See the consumerId field at
   * Reporting Metrics (https://cloud.google.com/service-control/reporting-metrics) for more details.
   * This field is present only if the product has usage-based billing configured.
   */
  @JsonProperty("usageReportingId")
  public Optional<String> getUsageReportingId() {
    return usageReportingId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SharedGcpMarketplaceEntitlement && equalTo((SharedGcpMarketplaceEntitlement) other);
  }

  private boolean equalTo(SharedGcpMarketplaceEntitlement other) {
    return account.equals(other.account) && consumers.equals(other.consumers) && createTime.equals(other.createTime) && id.equals(other.id) && inputProperties.equals(other.inputProperties) && messageToUser.equals(other.messageToUser) && name.equals(other.name) && newOfferDuration.equals(other.newOfferDuration) && newOfferEndTime.equals(other.newOfferEndTime) && newOfferStartTime.equals(other.newOfferStartTime) && newPendingOffer.equals(other.newPendingOffer) && newPendingOfferDuration.equals(other.newPendingOfferDuration) && newPendingPlan.equals(other.newPendingPlan) && newPlan.equals(other.newPlan) && offer.equals(other.offer) && offerDuration.equals(other.offerDuration) && offerEndTime.equals(other.offerEndTime) && plan.equals(other.plan) && product.equals(other.product) && productExternalName.equals(other.productExternalName) && provider.equals(other.provider) && quoteExternalName.equals(other.quoteExternalName) && state.equals(other.state) && subscriptionEndTime.equals(other.subscriptionEndTime) && updateTime.equals(other.updateTime) && usageReportingId.equals(other.usageReportingId);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.account, this.consumers, this.createTime, this.id, this.inputProperties, this.messageToUser, this.name, this.newOfferDuration, this.newOfferEndTime, this.newOfferStartTime, this.newPendingOffer, this.newPendingOfferDuration, this.newPendingPlan, this.newPlan, this.offer, this.offerDuration, this.offerEndTime, this.plan, this.product, this.productExternalName, this.provider, this.quoteExternalName, this.state, this.subscriptionEndTime, this.updateTime, this.usageReportingId);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SharedGcpMarketplaceEntitlement{" + "account: " + account + ", consumers: " + consumers + ", createTime: " + createTime + ", id: " + id + ", inputProperties: " + inputProperties + ", messageToUser: " + messageToUser + ", name: " + name + ", newOfferDuration: " + newOfferDuration + ", newOfferEndTime: " + newOfferEndTime + ", newOfferStartTime: " + newOfferStartTime + ", newPendingOffer: " + newPendingOffer + ", newPendingOfferDuration: " + newPendingOfferDuration + ", newPendingPlan: " + newPendingPlan + ", newPlan: " + newPlan + ", offer: " + offer + ", offerDuration: " + offerDuration + ", offerEndTime: " + offerEndTime + ", plan: " + plan + ", product: " + product + ", productExternalName: " + productExternalName + ", provider: " + provider + ", quoteExternalName: " + quoteExternalName + ", state: " + state + ", subscriptionEndTime: " + subscriptionEndTime + ", updateTime: " + updateTime + ", usageReportingId: " + usageReportingId + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> account = Optional.empty();

    private Optional<List<SharedGcpMarketplaceConsumer>> consumers = Optional.empty();

    private Optional<String> createTime = Optional.empty();

    private Optional<String> id = Optional.empty();

    private Optional<List<Integer>> inputProperties = Optional.empty();

    private Optional<String> messageToUser = Optional.empty();

    private Optional<String> name = Optional.empty();

    private Optional<String> newOfferDuration = Optional.empty();

    private Optional<String> newOfferEndTime = Optional.empty();

    private Optional<String> newOfferStartTime = Optional.empty();

    private Optional<String> newPendingOffer = Optional.empty();

    private Optional<String> newPendingOfferDuration = Optional.empty();

    private Optional<String> newPendingPlan = Optional.empty();

    private Optional<String> newPlan = Optional.empty();

    private Optional<String> offer = Optional.empty();

    private Optional<String> offerDuration = Optional.empty();

    private Optional<String> offerEndTime = Optional.empty();

    private Optional<String> plan = Optional.empty();

    private Optional<String> product = Optional.empty();

    private Optional<String> productExternalName = Optional.empty();

    private Optional<String> provider = Optional.empty();

    private Optional<String> quoteExternalName = Optional.empty();

    private Optional<SharedGcpMarketplaceEntitlementState> state = Optional.empty();

    private Optional<String> subscriptionEndTime = Optional.empty();

    private Optional<String> updateTime = Optional.empty();

    private Optional<String> usageReportingId = Optional.empty();

    private Builder() {
    }

    public Builder from(SharedGcpMarketplaceEntitlement other) {
      account(other.getAccount());
      consumers(other.getConsumers());
      createTime(other.getCreateTime());
      id(other.getId());
      inputProperties(other.getInputProperties());
      messageToUser(other.getMessageToUser());
      name(other.getName());
      newOfferDuration(other.getNewOfferDuration());
      newOfferEndTime(other.getNewOfferEndTime());
      newOfferStartTime(other.getNewOfferStartTime());
      newPendingOffer(other.getNewPendingOffer());
      newPendingOfferDuration(other.getNewPendingOfferDuration());
      newPendingPlan(other.getNewPendingPlan());
      newPlan(other.getNewPlan());
      offer(other.getOffer());
      offerDuration(other.getOfferDuration());
      offerEndTime(other.getOfferEndTime());
      plan(other.getPlan());
      product(other.getProduct());
      productExternalName(other.getProductExternalName());
      provider(other.getProvider());
      quoteExternalName(other.getQuoteExternalName());
      state(other.getState());
      subscriptionEndTime(other.getSubscriptionEndTime());
      updateTime(other.getUpdateTime());
      usageReportingId(other.getUsageReportingId());
      return this;
    }

    @JsonSetter(
        value = "account",
        nulls = Nulls.SKIP
    )
    public Builder account(Optional<String> account) {
      this.account = account;
      return this;
    }

    public Builder account(String account) {
      this.account = Optional.of(account);
      return this;
    }

    @JsonSetter(
        value = "consumers",
        nulls = Nulls.SKIP
    )
    public Builder consumers(Optional<List<SharedGcpMarketplaceConsumer>> consumers) {
      this.consumers = consumers;
      return this;
    }

    public Builder consumers(List<SharedGcpMarketplaceConsumer> consumers) {
      this.consumers = Optional.of(consumers);
      return this;
    }

    @JsonSetter(
        value = "createTime",
        nulls = Nulls.SKIP
    )
    public Builder createTime(Optional<String> createTime) {
      this.createTime = createTime;
      return this;
    }

    public Builder createTime(String createTime) {
      this.createTime = Optional.of(createTime);
      return this;
    }

    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public Builder id(Optional<String> id) {
      this.id = id;
      return this;
    }

    public Builder id(String id) {
      this.id = Optional.of(id);
      return this;
    }

    @JsonSetter(
        value = "inputProperties",
        nulls = Nulls.SKIP
    )
    public Builder inputProperties(Optional<List<Integer>> inputProperties) {
      this.inputProperties = inputProperties;
      return this;
    }

    public Builder inputProperties(List<Integer> inputProperties) {
      this.inputProperties = Optional.of(inputProperties);
      return this;
    }

    @JsonSetter(
        value = "messageToUser",
        nulls = Nulls.SKIP
    )
    public Builder messageToUser(Optional<String> messageToUser) {
      this.messageToUser = messageToUser;
      return this;
    }

    public Builder messageToUser(String messageToUser) {
      this.messageToUser = Optional.of(messageToUser);
      return this;
    }

    @JsonSetter(
        value = "name",
        nulls = Nulls.SKIP
    )
    public Builder name(Optional<String> name) {
      this.name = name;
      return this;
    }

    public Builder name(String name) {
      this.name = Optional.of(name);
      return this;
    }

    @JsonSetter(
        value = "newOfferDuration",
        nulls = Nulls.SKIP
    )
    public Builder newOfferDuration(Optional<String> newOfferDuration) {
      this.newOfferDuration = newOfferDuration;
      return this;
    }

    public Builder newOfferDuration(String newOfferDuration) {
      this.newOfferDuration = Optional.of(newOfferDuration);
      return this;
    }

    @JsonSetter(
        value = "newOfferEndTime",
        nulls = Nulls.SKIP
    )
    public Builder newOfferEndTime(Optional<String> newOfferEndTime) {
      this.newOfferEndTime = newOfferEndTime;
      return this;
    }

    public Builder newOfferEndTime(String newOfferEndTime) {
      this.newOfferEndTime = Optional.of(newOfferEndTime);
      return this;
    }

    @JsonSetter(
        value = "newOfferStartTime",
        nulls = Nulls.SKIP
    )
    public Builder newOfferStartTime(Optional<String> newOfferStartTime) {
      this.newOfferStartTime = newOfferStartTime;
      return this;
    }

    public Builder newOfferStartTime(String newOfferStartTime) {
      this.newOfferStartTime = Optional.of(newOfferStartTime);
      return this;
    }

    @JsonSetter(
        value = "newPendingOffer",
        nulls = Nulls.SKIP
    )
    public Builder newPendingOffer(Optional<String> newPendingOffer) {
      this.newPendingOffer = newPendingOffer;
      return this;
    }

    public Builder newPendingOffer(String newPendingOffer) {
      this.newPendingOffer = Optional.of(newPendingOffer);
      return this;
    }

    @JsonSetter(
        value = "newPendingOfferDuration",
        nulls = Nulls.SKIP
    )
    public Builder newPendingOfferDuration(Optional<String> newPendingOfferDuration) {
      this.newPendingOfferDuration = newPendingOfferDuration;
      return this;
    }

    public Builder newPendingOfferDuration(String newPendingOfferDuration) {
      this.newPendingOfferDuration = Optional.of(newPendingOfferDuration);
      return this;
    }

    @JsonSetter(
        value = "newPendingPlan",
        nulls = Nulls.SKIP
    )
    public Builder newPendingPlan(Optional<String> newPendingPlan) {
      this.newPendingPlan = newPendingPlan;
      return this;
    }

    public Builder newPendingPlan(String newPendingPlan) {
      this.newPendingPlan = Optional.of(newPendingPlan);
      return this;
    }

    @JsonSetter(
        value = "newPlan",
        nulls = Nulls.SKIP
    )
    public Builder newPlan(Optional<String> newPlan) {
      this.newPlan = newPlan;
      return this;
    }

    public Builder newPlan(String newPlan) {
      this.newPlan = Optional.of(newPlan);
      return this;
    }

    @JsonSetter(
        value = "offer",
        nulls = Nulls.SKIP
    )
    public Builder offer(Optional<String> offer) {
      this.offer = offer;
      return this;
    }

    public Builder offer(String offer) {
      this.offer = Optional.of(offer);
      return this;
    }

    @JsonSetter(
        value = "offerDuration",
        nulls = Nulls.SKIP
    )
    public Builder offerDuration(Optional<String> offerDuration) {
      this.offerDuration = offerDuration;
      return this;
    }

    public Builder offerDuration(String offerDuration) {
      this.offerDuration = Optional.of(offerDuration);
      return this;
    }

    @JsonSetter(
        value = "offerEndTime",
        nulls = Nulls.SKIP
    )
    public Builder offerEndTime(Optional<String> offerEndTime) {
      this.offerEndTime = offerEndTime;
      return this;
    }

    public Builder offerEndTime(String offerEndTime) {
      this.offerEndTime = Optional.of(offerEndTime);
      return this;
    }

    @JsonSetter(
        value = "plan",
        nulls = Nulls.SKIP
    )
    public Builder plan(Optional<String> plan) {
      this.plan = plan;
      return this;
    }

    public Builder plan(String plan) {
      this.plan = Optional.of(plan);
      return this;
    }

    @JsonSetter(
        value = "product",
        nulls = Nulls.SKIP
    )
    public Builder product(Optional<String> product) {
      this.product = product;
      return this;
    }

    public Builder product(String product) {
      this.product = Optional.of(product);
      return this;
    }

    @JsonSetter(
        value = "productExternalName",
        nulls = Nulls.SKIP
    )
    public Builder productExternalName(Optional<String> productExternalName) {
      this.productExternalName = productExternalName;
      return this;
    }

    public Builder productExternalName(String productExternalName) {
      this.productExternalName = Optional.of(productExternalName);
      return this;
    }

    @JsonSetter(
        value = "provider",
        nulls = Nulls.SKIP
    )
    public Builder provider(Optional<String> provider) {
      this.provider = provider;
      return this;
    }

    public Builder provider(String provider) {
      this.provider = Optional.of(provider);
      return this;
    }

    @JsonSetter(
        value = "quoteExternalName",
        nulls = Nulls.SKIP
    )
    public Builder quoteExternalName(Optional<String> quoteExternalName) {
      this.quoteExternalName = quoteExternalName;
      return this;
    }

    public Builder quoteExternalName(String quoteExternalName) {
      this.quoteExternalName = Optional.of(quoteExternalName);
      return this;
    }

    @JsonSetter(
        value = "state",
        nulls = Nulls.SKIP
    )
    public Builder state(Optional<SharedGcpMarketplaceEntitlementState> state) {
      this.state = state;
      return this;
    }

    public Builder state(SharedGcpMarketplaceEntitlementState state) {
      this.state = Optional.of(state);
      return this;
    }

    @JsonSetter(
        value = "subscriptionEndTime",
        nulls = Nulls.SKIP
    )
    public Builder subscriptionEndTime(Optional<String> subscriptionEndTime) {
      this.subscriptionEndTime = subscriptionEndTime;
      return this;
    }

    public Builder subscriptionEndTime(String subscriptionEndTime) {
      this.subscriptionEndTime = Optional.of(subscriptionEndTime);
      return this;
    }

    @JsonSetter(
        value = "updateTime",
        nulls = Nulls.SKIP
    )
    public Builder updateTime(Optional<String> updateTime) {
      this.updateTime = updateTime;
      return this;
    }

    public Builder updateTime(String updateTime) {
      this.updateTime = Optional.of(updateTime);
      return this;
    }

    @JsonSetter(
        value = "usageReportingId",
        nulls = Nulls.SKIP
    )
    public Builder usageReportingId(Optional<String> usageReportingId) {
      this.usageReportingId = usageReportingId;
      return this;
    }

    public Builder usageReportingId(String usageReportingId) {
      this.usageReportingId = Optional.of(usageReportingId);
      return this;
    }

    public SharedGcpMarketplaceEntitlement build() {
      return new SharedGcpMarketplaceEntitlement(account, consumers, createTime, id, inputProperties, messageToUser, name, newOfferDuration, newOfferEndTime, newOfferStartTime, newPendingOffer, newPendingOfferDuration, newPendingPlan, newPlan, offer, offerDuration, offerEndTime, plan, product, productExternalName, provider, quoteExternalName, state, subscriptionEndTime, updateTime, usageReportingId);
    }
  }
}
